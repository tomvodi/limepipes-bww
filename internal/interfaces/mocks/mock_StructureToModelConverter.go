// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	filestructure "github.com/tomvodi/limepipes-plugin-bww/internal/filestructure"

	mock "github.com/stretchr/testify/mock"

	tune "github.com/tomvodi/limepipes-plugin-api/musicmodel/v1/tune"
)

// StructureToModelConverter is an autogenerated mock type for the StructureToModelConverter type
type StructureToModelConverter struct {
	mock.Mock
}

type StructureToModelConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *StructureToModelConverter) EXPECT() *StructureToModelConverter_Expecter {
	return &StructureToModelConverter_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function with given fields: t
func (_m *StructureToModelConverter) Convert(t *filestructure.Tune) (*tune.Tune, error) {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 *tune.Tune
	var r1 error
	if rf, ok := ret.Get(0).(func(*filestructure.Tune) (*tune.Tune, error)); ok {
		return rf(t)
	}
	if rf, ok := ret.Get(0).(func(*filestructure.Tune) *tune.Tune); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tune.Tune)
		}
	}

	if rf, ok := ret.Get(1).(func(*filestructure.Tune) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StructureToModelConverter_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type StructureToModelConverter_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - t *filestructure.Tune
func (_e *StructureToModelConverter_Expecter) Convert(t interface{}) *StructureToModelConverter_Convert_Call {
	return &StructureToModelConverter_Convert_Call{Call: _e.mock.On("Convert", t)}
}

func (_c *StructureToModelConverter_Convert_Call) Run(run func(t *filestructure.Tune)) *StructureToModelConverter_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*filestructure.Tune))
	})
	return _c
}

func (_c *StructureToModelConverter_Convert_Call) Return(_a0 *tune.Tune, _a1 error) *StructureToModelConverter_Convert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StructureToModelConverter_Convert_Call) RunAndReturn(run func(*filestructure.Tune) (*tune.Tune, error)) *StructureToModelConverter_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// NewStructureToModelConverter creates a new instance of StructureToModelConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStructureToModelConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *StructureToModelConverter {
	mock := &StructureToModelConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
