// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	common "github.com/tomvodi/limepipes-plugin-bww/internal/common"
	filestructure "github.com/tomvodi/limepipes-plugin-bww/internal/filestructure"

	mock "github.com/stretchr/testify/mock"
)

// TokenStructureConverter is an autogenerated mock type for the TokenStructureConverter type
type TokenStructureConverter struct {
	mock.Mock
}

type TokenStructureConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenStructureConverter) EXPECT() *TokenStructureConverter_Expecter {
	return &TokenStructureConverter_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function with given fields: tokens
func (_m *TokenStructureConverter) Convert(tokens []*common.Token) (*filestructure.BwwFile, error) {
	ret := _m.Called(tokens)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 *filestructure.BwwFile
	var r1 error
	if rf, ok := ret.Get(0).(func([]*common.Token) (*filestructure.BwwFile, error)); ok {
		return rf(tokens)
	}
	if rf, ok := ret.Get(0).(func([]*common.Token) *filestructure.BwwFile); ok {
		r0 = rf(tokens)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filestructure.BwwFile)
		}
	}

	if rf, ok := ret.Get(1).(func([]*common.Token) error); ok {
		r1 = rf(tokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenStructureConverter_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type TokenStructureConverter_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - tokens []*common.Token
func (_e *TokenStructureConverter_Expecter) Convert(tokens interface{}) *TokenStructureConverter_Convert_Call {
	return &TokenStructureConverter_Convert_Call{Call: _e.mock.On("Convert", tokens)}
}

func (_c *TokenStructureConverter_Convert_Call) Run(run func(tokens []*common.Token)) *TokenStructureConverter_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*common.Token))
	})
	return _c
}

func (_c *TokenStructureConverter_Convert_Call) Return(_a0 *filestructure.BwwFile, _a1 error) *TokenStructureConverter_Convert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenStructureConverter_Convert_Call) RunAndReturn(run func([]*common.Token) (*filestructure.BwwFile, error)) *TokenStructureConverter_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenStructureConverter creates a new instance of TokenStructureConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenStructureConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenStructureConverter {
	mock := &TokenStructureConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
