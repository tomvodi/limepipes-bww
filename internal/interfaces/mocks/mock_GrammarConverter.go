// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	common "github.com/tomvodi/limepipes-plugin-bww/internal/common"

	mock "github.com/stretchr/testify/mock"

	musicmodel "github.com/tomvodi/limepipes-plugin-api/musicmodel/v1/musicmodel"
)

// GrammarConverter is an autogenerated mock type for the GrammarConverter type
type GrammarConverter struct {
	mock.Mock
}

type GrammarConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *GrammarConverter) EXPECT() *GrammarConverter_Expecter {
	return &GrammarConverter_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function with given fields: grammar
func (_m *GrammarConverter) Convert(grammar *common.BwwStructure) (musicmodel.MusicModel, error) {
	ret := _m.Called(grammar)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 musicmodel.MusicModel
	var r1 error
	if rf, ok := ret.Get(0).(func(*common.BwwStructure) (musicmodel.MusicModel, error)); ok {
		return rf(grammar)
	}
	if rf, ok := ret.Get(0).(func(*common.BwwStructure) musicmodel.MusicModel); ok {
		r0 = rf(grammar)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(musicmodel.MusicModel)
		}
	}

	if rf, ok := ret.Get(1).(func(*common.BwwStructure) error); ok {
		r1 = rf(grammar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrammarConverter_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type GrammarConverter_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - grammar *common.BwwStructure
func (_e *GrammarConverter_Expecter) Convert(grammar interface{}) *GrammarConverter_Convert_Call {
	return &GrammarConverter_Convert_Call{Call: _e.mock.On("Convert", grammar)}
}

func (_c *GrammarConverter_Convert_Call) Run(run func(grammar *common.BwwStructure)) *GrammarConverter_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.BwwStructure))
	})
	return _c
}

func (_c *GrammarConverter_Convert_Call) Return(_a0 musicmodel.MusicModel, _a1 error) *GrammarConverter_Convert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GrammarConverter_Convert_Call) RunAndReturn(run func(*common.BwwStructure) (musicmodel.MusicModel, error)) *GrammarConverter_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// NewGrammarConverter creates a new instance of GrammarConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGrammarConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *GrammarConverter {
	mock := &GrammarConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
