// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	common "github.com/tomvodi/limepipes-plugin-bww/internal/common"

	mock "github.com/stretchr/testify/mock"
)

// FileTokenizer is an autogenerated mock type for the FileTokenizer type
type FileTokenizer struct {
	mock.Mock
}

type FileTokenizer_Expecter struct {
	mock *mock.Mock
}

func (_m *FileTokenizer) EXPECT() *FileTokenizer_Expecter {
	return &FileTokenizer_Expecter{mock: &_m.Mock}
}

// Tokenize provides a mock function with given fields: data
func (_m *FileTokenizer) Tokenize(data []byte) ([]*common.Token, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Tokenize")
	}

	var r0 []*common.Token
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]*common.Token, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) []*common.Token); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.Token)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileTokenizer_Tokenize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tokenize'
type FileTokenizer_Tokenize_Call struct {
	*mock.Call
}

// Tokenize is a helper method to define mock.On call
//   - data []byte
func (_e *FileTokenizer_Expecter) Tokenize(data interface{}) *FileTokenizer_Tokenize_Call {
	return &FileTokenizer_Tokenize_Call{Call: _e.mock.On("Tokenize", data)}
}

func (_c *FileTokenizer_Tokenize_Call) Run(run func(data []byte)) *FileTokenizer_Tokenize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *FileTokenizer_Tokenize_Call) Return(_a0 []*common.Token, _a1 error) *FileTokenizer_Tokenize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileTokenizer_Tokenize_Call) RunAndReturn(run func([]byte) ([]*common.Token, error)) *FileTokenizer_Tokenize_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileTokenizer creates a new instance of FileTokenizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileTokenizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileTokenizer {
	mock := &FileTokenizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
