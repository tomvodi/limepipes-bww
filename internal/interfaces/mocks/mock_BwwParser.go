// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	music_model "github.com/tomvodi/limepipes-plugin-bww/internal/common/music_model"
)

// BwwParser is an autogenerated mock type for the BwwParser type
type BwwParser struct {
	mock.Mock
}

type BwwParser_Expecter struct {
	mock *mock.Mock
}

func (_m *BwwParser) EXPECT() *BwwParser_Expecter {
	return &BwwParser_Expecter{mock: &_m.Mock}
}

// ParseBwwData provides a mock function with given fields: data
func (_m *BwwParser) ParseBwwData(data []byte) (music_model.MusicModel, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for ParseBwwData")
	}

	var r0 music_model.MusicModel
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (music_model.MusicModel, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) music_model.MusicModel); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(music_model.MusicModel)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BwwParser_ParseBwwData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseBwwData'
type BwwParser_ParseBwwData_Call struct {
	*mock.Call
}

// ParseBwwData is a helper method to define mock.On call
//   - data []byte
func (_e *BwwParser_Expecter) ParseBwwData(data interface{}) *BwwParser_ParseBwwData_Call {
	return &BwwParser_ParseBwwData_Call{Call: _e.mock.On("ParseBwwData", data)}
}

func (_c *BwwParser_ParseBwwData_Call) Run(run func(data []byte)) *BwwParser_ParseBwwData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *BwwParser_ParseBwwData_Call) Return(_a0 music_model.MusicModel, _a1 error) *BwwParser_ParseBwwData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BwwParser_ParseBwwData_Call) RunAndReturn(run func([]byte) (music_model.MusicModel, error)) *BwwParser_ParseBwwData_Call {
	_c.Call.Return(run)
	return _c
}

// NewBwwParser creates a new instance of BwwParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBwwParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *BwwParser {
	mock := &BwwParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
